<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ResultsSession buildId="CLI-DEMO1-2025-04-04" date="04/04/25 20:18:45" endTime="1970-01-01T03:00:00+03:00" machine="ESL1" project="CLI-DEMO1" tag="MISRA C++ 2023" time="2025-04-04T20:18:45+03:00" toolName="C++test" toolVer="2024.2.0.20241115B2628" user="danie">
   <TestConfig machine="ESL1" name="MISRA C++ 2023" pseudoUrl="c++test.builtin://MISRA C++ 2023" user="danie"/>
   <Authors/>
   <VersionInfos>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="IExecutionViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="InsureViolation" ver="3"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.scope" resultId="IScopeProjectInfo" ver="3"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationInfo" ver="2"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationProjectInfo" ver="2"/>
   </VersionInfos>
   <mergePnt id="locationsDetails"/>
   <mergePnt id="executedTestsDetails"/>
   <Scope>
      <ProjectInformations>
         <ScopeProjectInfo fltFiles="1" fltLns="581" project="ParasoftSeverityReportFixed/ParasoftSeverityReportFixed" totFiles="1" totLns="581"/>
      </ProjectInformations>
   </Scope>
   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:12">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="0" checkedLns="0" name="ParasoftSeverityReportFixed" qfixErrs="0" suppErrs="0" totErrs="0" totFiles="1" totLns="581"/>
      </Projects>
      <TestingProcessProblems>
         <StaticAnalyzerTestingProcessProblem tested="[WARNING] Flow Analysis encountered problems when building analysis data.">
            <ErrorList>
               <Error val="Flow Analysis was not able to analyze the ParasoftSeverityReportFixed/main.cpp source file."/>
            </ErrorList>
         </StaticAnalyzerTestingProcessProblem>
         <StaticAnalyzerTestingProcessProblem tested="[ERROR] Collecting header files for ParasoftSeverityReportFixed/main.cpp finished with code 1 (ipro)">
            <ErrorList>
               <Error val="Error preprocessing file &quot;C:\alice\ParasoftSeverityReportFixed\ParasoftSeverityReportFixed\main.cpp&quot;: &#13;&#10;Cannot launch process: cl.exe &quot;-IC:\Program Files\Parasoft\C++test for Visual Studio (x86_64)\10.7\engine\runtime\include&quot; /EHsc /MDd /Gd &quot;/IC:\Users\danie\vcpkg\installed\x64-windows\include&quot; &quot;/IC:\Users\danie\vcpkg\installed\x64-windows\include&quot; /D_MBCS /Zc:wchar_t /Zc:forScope /Zc:inline /diagnostics:column /std:c++20 -DPARASOFT_CPPTEST -I. -E -nologo &quot;-FoC:\alice\ParasoftSeverityReportFixed\.cpptest\.dtpengine\.cpptest\com.parasoft.xtest.cpp.ipro\2\7\9\30c8a\0\tmp\ParaSoft.33916.41\ParaSoft.33916.18467.cpp.obj&quot; -Tp &quot;C:\alice\ParasoftSeverityReportFixed\ParasoftSeverityReportFixed\main.cpp&quot; &#13;&#10;The system cannot find the file specified.&#13;&#10;&#13;&#10;&#13;&#10;Could not preprocess source file"/>
            </ErrorList>
         </StaticAnalyzerTestingProcessProblem>
         <StaticAnalyzerTestingProcessProblem tested="[ERROR] Code Analysis for ParasoftSeverityReportFixed/main.cpp finished with code 1 (ipro)">
            <ErrorList>
               <Error val="Error preprocessing file &quot;C:\alice\ParasoftSeverityReportFixed\ParasoftSeverityReportFixed\main.cpp&quot;: &#13;&#10;Cannot launch process: cl.exe &quot;-IC:\Program Files\Parasoft\C++test for Visual Studio (x86_64)\10.7\engine\runtime\include&quot; /EHsc /MDd /Gd &quot;/IC:\Users\danie\vcpkg\installed\x64-windows\include&quot; &quot;/IC:\Users\danie\vcpkg\installed\x64-windows\include&quot; /D_MBCS /Zc:wchar_t /Zc:forScope /Zc:inline /diagnostics:column /std:c++20 -DPARASOFT_CPPTEST -I. -E -nologo &quot;-FoC:\alice\ParasoftSeverityReportFixed\.cpptest\.dtpengine\.cpptest\com.parasoft.xtest.cpp.analyzer.code\2\7\9\30c8a\0\tmp\ParaSoft.22652.41\ParaSoft.22652.18467.cpp.obj&quot; -Tp &quot;C:\alice\ParasoftSeverityReportFixed\ParasoftSeverityReportFixed\main.cpp&quot; &#13;&#10;The system cannot find the file specified.&#13;&#10;&#13;&#10;&#13;&#10;Could not preprocess source file"/>
            </ErrorList>
         </StaticAnalyzerTestingProcessProblem>
      </TestingProcessProblems>
      <Rules>
         <RulesList>
            <Rule cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRACPP2023-0_0_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRACPP2023-0_0_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRACPP2023-0_0_1-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in switch statement" id="MISRACPP2023-0_0_1-d" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code in 'for' loop" id="MISRACPP2023-0_0_1-e" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRACPP2023-0_0_1-f" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRACPP2023-0_0_1-g" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRACPP2023-0_0_1-h" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="MISRACPP2023-0_0_1-i" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_1" desc="A 'try' statement of a 'try-block' should contain a potentially-throwing statement" id="MISRACPP2023-0_0_1-j" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_0_2" desc="Avoid conditions that always evaluate to the same value" id="MISRACPP2023-0_0_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_1_1" desc="Avoid unused values" id="MISRACPP2023-0_1_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRACPP2023-0_1_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_2_1" desc="A project should not contain unused local variables" id="MISRACPP2023-0_2_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_2_1" desc="A project should not contain unused variables with internal linkage" id="MISRACPP2023-0_2_1-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_2_2" desc="Eliminate unused parameters" id="MISRACPP2023-0_2_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_2_2" desc="There shall be no unused named parameters in virtual functions" id="MISRACPP2023-0_2_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_2_3" desc="Types declared in an unnamed namespace scope should be used at least once" id="MISRACPP2023-0_2_3-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_2_3" desc="Types declared in a block scope should be used at least once" id="MISRACPP2023-0_2_3-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_2_4" desc="Avoid unreachable methods" id="MISRACPP2023-0_2_4-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_3_1" desc="Do not use object representations to compare floating-point values" id="MISRACPP2023-0_3_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_3_1" desc="Floating-point expressions shall not be explicitly (syntactically) tested for equality (==) or inequality (!=)" id="MISRACPP2023-0_3_1-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_3_1" desc="Do not use floating point variables as loop counters" id="MISRACPP2023-0_3_1-c" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_3_1" desc="Do not use floating-point expressions which may result in NaN and infinity values" id="MISRACPP2023-0_3_1-d" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-0_3_2" desc="Do not pass incorrect values to library functions" id="MISRACPP2023-0_3_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_0_1" desc="Each variable should be declared in a separate declaration statement" id="MISRACPP2023-10_0_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_1_1" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRACPP2023-10_1_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_1_1" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRACPP2023-10_1_1-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_1_1" desc="Declare reference parameters as const references whenever possible" id="MISRACPP2023-10_1_1-c" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_1_2" desc="The volatile qualifier shall be used appropriately" id="MISRACPP2023-10_1_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_2_1" desc="An enumeration shall be defined with an explicit underlying type" id="MISRACPP2023-10_2_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_2_1" desc="An explicit or implicit enumerator value shall not be the result of a narrowing conversion" id="MISRACPP2023-10_2_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_2_2" desc="Unscoped enumerations should not be declared" id="MISRACPP2023-10_2_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_2_3" desc="The numeric value of an unscoped enumeration with no fixed underlying type shall not be used" id="MISRACPP2023-10_2_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_3_1" desc="There shall be no unnamed namespaces in header files" id="MISRACPP2023-10_3_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-10_4_1" desc="The 'asm' declaration should not be used" id="MISRACPP2023-10_4_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-11_3_1" desc="C-style arrays shall not be used" id="MISRACPP2023-11_3_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-11_3_2" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRACPP2023-11_3_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-11_6_1" desc="All non-class variables with automatic storage duration should be explicitly initialized" id="MISRACPP2023-11_6_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-11_6_2" desc="Avoid use before initialization" id="MISRACPP2023-11_6_2-a" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-11_6_3" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRACPP2023-11_6_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-12_2_1" desc="Do not declare member variables as bit-fields" id="MISRACPP2023-12_2_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-12_2_2" desc="A bit-field shall have an appropriate type" id="MISRACPP2023-12_2_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-12_2_2" desc="All enumeration values should be representable within the width of the bit-field" id="MISRACPP2023-12_2_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-12_2_3" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRACPP2023-12_2_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-12_3_1" desc="The union keyword should not be used" id="MISRACPP2023-12_3_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-13_1_1" desc="Classes should not be derived from virtual bases" id="MISRACPP2023-13_1_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-13_1_2" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRACPP2023-13_1_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-13_3_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="MISRACPP2023-13_3_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-13_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="MISRACPP2023-13_3_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-13_3_2" desc="Parameters in an overriding virtual function shall not specify different default arguments" id="MISRACPP2023-13_3_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-13_3_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRACPP2023-13_3_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-13_3_3" desc="The parameters in all overrides of a function should either be unnamed or have identical names" id="MISRACPP2023-13_3_3-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-13_3_4" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="MISRACPP2023-13_3_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-14_1_1" desc="Non-static data members should be either all private or all public" id="MISRACPP2023-14_1_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_0_1" desc="Special member functions shall be provided appropriately" id="MISRACPP2023-15_0_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_0_1" desc="Destructor shall have a non-empty body" id="MISRACPP2023-15_0_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_0_2" desc="User-provided copy and move member functions of a class should have appropriate signatures" id="MISRACPP2023-15_0_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_1_1" desc="Do not use dynamic type of an object under construction" id="MISRACPP2023-15_1_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_1_1" desc="Do not use dynamic type of an object under destruction" id="MISRACPP2023-15_1_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_1_2" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRACPP2023-15_1_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_1_3" desc="Constructors allowing for conversion should be made explicit" id="MISRACPP2023-15_1_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_1_3" desc="User-conversion cast operators should be made explicit" id="MISRACPP2023-15_1_3-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_1_4" desc="All direct, non-static data members of a non-aggregate class should be initialized at the top of a constructor body" id="MISRACPP2023-15_1_4-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_1_4" desc="All direct, non-static data members of an aggregate class should be initialized as soon as the object is created" id="MISRACPP2023-15_1_4-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_1_5" desc="A class shall only define an initializer-list constructor when it is the only constructor" id="MISRACPP2023-15_1_5-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_8_1" desc="User-provided copy assignment operators shall handle self-assignment" id="MISRACPP2023-15_8_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-15_8_1" desc="User-provided move assignment operators shall handle self-assignment" id="MISRACPP2023-15_8_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-16_5_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="MISRACPP2023-16_5_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-16_5_2" desc="The unary &amp; operator shall not be overloaded" id="MISRACPP2023-16_5_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-16_6_1" desc="Symmetrical operators should only be implemented as non-member functions" id="MISRACPP2023-16_6_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-17_8_1" desc="Function templates shall not be explicitly specialized" id="MISRACPP2023-17_8_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_1_1" desc="An exception object should not have pointer type" id="MISRACPP2023-18_1_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_1_2" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="MISRACPP2023-18_1_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_3_1" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRACPP2023-18_3_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_3_2" desc="A class type exception shall always be caught by reference" id="MISRACPP2023-18_3_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="MISRACPP2023-18_3_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_4_1" desc="Exception-unfriendly functions shall be noexcept" id="MISRACPP2023-18_4_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_4_1" desc="Functions used as initializers of non-constexpr, non-local variables shall be noexcept" id="MISRACPP2023-18_4_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_4_1" desc="Pass only 'noexcept' functions to exception-unfriendly functions" id="MISRACPP2023-18_4_1-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_5_1" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRACPP2023-18_5_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_5_2" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRACPP2023-18_5_2-c" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-18_5_2" desc="The 'terminate' function should not be used" id="MISRACPP2023-18_5_2-d" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_0_1" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRACPP2023-19_0_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_0_2" desc="Function-like macros shall not be defined" id="MISRACPP2023-19_0_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_0_3" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRACPP2023-19_0_3-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_0_4" desc="#undef should only be used for macros defined previously in the same file" id="MISRACPP2023-19_0_4-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRACPP2023-19_1_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRACPP2023-19_1_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_1_3" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRACPP2023-19_1_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_2_1" desc="Use unique multiple include guards" id="MISRACPP2023-19_2_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_2_2" desc="The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence" id="MISRACPP2023-19_2_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_2_3" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRACPP2023-19_2_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_3_1" desc="The # and ## preprocessor operators should not be used" id="MISRACPP2023-19_3_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_3_2" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRACPP2023-19_3_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_3_3" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRACPP2023-19_3_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_3_4" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRACPP2023-19_3_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_3_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRACPP2023-19_3_5-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_6_1" desc="The #pragma directive shall not be used" id="MISRACPP2023-19_6_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-19_6_1" desc="The '_Pragma' operator should not be used" id="MISRACPP2023-19_6_1-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_10_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRACPP2023-21_10_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_10_2" desc="The facilities provided by &lt;setjmp.h&gt; should not be used" id="MISRACPP2023-21_10_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_10_2" desc="The standard header files &lt;setjmp.h&gt; or &lt;csetjmp&gt; shall not be used" id="MISRACPP2023-21_10_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_10_3" desc="The signal handling facilities of &lt;signal.h&gt;, except for a call to the 'signal()' function with a value of SIG_IGN, shall not be used" id="MISRACPP2023-21_10_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_2_1" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRACPP2023-21_2_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_2_2" desc="The string handling functions from &lt;cstring&gt;, &lt;cstdlib&gt;, &lt;cwchar&gt; and &lt;cinttypes&gt; shall not be used" id="MISRACPP2023-21_2_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_2_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRACPP2023-21_2_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_2_4" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRACPP2023-21_2_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_1" desc="Dynamic heap memory allocation shall not be used" id="MISRACPP2023-21_6_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_2" desc="Dynamic heap memory allocation shall not be used" id="MISRACPP2023-21_6_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_2" desc="Any member function named 'allocate' or 'deallocate' enclosed by namespace 'std' should not be used" id="MISRACPP2023-21_6_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_2" desc="The 'std::unique_ptr::release' function should not be used" id="MISRACPP2023-21_6_2-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_3" desc="Destructor should not be called manually" id="MISRACPP2023-21_6_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_3" desc="Do not declare the 'new' and 'delete' operators" id="MISRACPP2023-21_6_3-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_3" desc="The memory management functions from the &lt;new&gt; and &lt;memory&gt; headers should not be used" id="MISRACPP2023-21_6_3-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_3" desc="Advanced memory management operators 'new' and 'delete' should not be used" id="MISRACPP2023-21_6_3-d" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_4" desc="Define both sized and unsized versions of operator delete" id="MISRACPP2023-21_6_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-21_6_5" desc="Do not delete objects with incomplete class at the point of deletion" id="MISRACPP2023-21_6_5-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-22_3_1" desc="The 'assert' macro shall not be used with a constant expression" id="MISRACPP2023-22_3_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-22_4_1" desc="The literal value zero shall be the only value assigned to errno" id="MISRACPP2023-22_4_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-23_11_1" desc="The raw pointer constructors of 'std::shared_ptr' and 'std::unique_ptr' should not be used" id="MISRACPP2023-23_11_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-24_5_1" desc="The character handling functions from &lt;cctype&gt; and &lt;cwctype&gt; shall not be used" id="MISRACPP2023-24_5_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-24_5_2" desc="The C++ Standard Library functions 'memcpy', 'memmove' and 'memcmp' from &lt;cstring&gt; should not be used" id="MISRACPP2023-24_5_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-25_5_1" desc="The 'setlocale' function should not be used" id="MISRACPP2023-25_5_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-25_5_1" desc="The 'std::locale::global' function should not be used" id="MISRACPP2023-25_5_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-25_5_2" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRACPP2023-25_5_2-a" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-25_5_2" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRACPP2023-25_5_2-b" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-25_5_2" desc="The address of the 'localeconv', 'getenv', 'setlocale' or, 'strerror' function should not be taken" id="MISRACPP2023-25_5_2-c" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-25_5_3" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRACPP2023-25_5_3-a" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-26_3_1" desc="Avoid using vector&lt;bool&gt;" id="MISRACPP2023-26_3_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-28_3_1" desc="Predicates shall not have persistent side effects" id="MISRACPP2023-28_3_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-28_6_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="MISRACPP2023-28_6_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-28_6_2" desc="The 'std::forward' function should be used to forward forwarding references" id="MISRACPP2023-28_6_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-28_6_2" desc="The 'std::forward' function should only be used to forward forwarding references" id="MISRACPP2023-28_6_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-28_6_3" desc="Do not subsequently use the argument to std::forward" id="MISRACPP2023-28_6_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-28_6_3" desc="Do not rely on the value of a moved-from object" id="MISRACPP2023-28_6_3-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-28_6_4" desc="The result of std::remove, std::remove_if, std::unique and empty shall be used" id="MISRACPP2023-28_6_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-30_0_1" desc="The input/output library stdio.h shall not be used" id="MISRACPP2023-30_0_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-30_0_1" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="MISRACPP2023-30_0_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-30_0_2" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="MISRACPP2023-30_0_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_1_2" desc="Do not include headers deprecated in the C++17 standard" id="MISRACPP2023-4_1_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_1_2" desc="The 'uncaught_exception' function deprecated in the C++17 standard should not be used" id="MISRACPP2023-4_1_2-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_1_2" desc="Do not use throw exception specifications" id="MISRACPP2023-4_1_2-c" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_1_2" desc="A constexpr static data member should not be declared outside the class definition" id="MISRACPP2023-4_1_2-d" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_1_3" desc="Avoid incorrect shift operations" id="MISRACPP2023-4_1_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_1_3" desc="Avoid signed integer overflows" id="MISRACPP2023-4_1_3-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_1_3" desc="Avoid null pointer dereferencing" id="MISRACPP2023-4_1_3-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_1_3" desc="Avoid division by zero" id="MISRACPP2023-4_1_3-d" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_6_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRACPP2023-4_6_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRACPP2023-4_6_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRACPP2023-4_6_1-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRACPP2023-4_6_1-d" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_6_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRACPP2023-4_6_1-e" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_6_1" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRACPP2023-4_6_1-f" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-4_6_1" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRACPP2023-4_6_1-g" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_0_1" desc="Trigraphs shall not be used" id="MISRACPP2023-5_0_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_10_1" desc="Do not declare entities in the standard library namespaces: posix, std and stdN" id="MISRACPP2023-5_10_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_10_1" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="MISRACPP2023-5_10_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_10_1" desc="An identifier shall not contain a double underscore '__'" id="MISRACPP2023-5_10_1-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_10_1" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="MISRACPP2023-5_10_1-d" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_10_1" desc="A user-defined literal suffix should be directly preceded by a literal operator" id="MISRACPP2023-5_10_1-e" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_10_1" desc="A macro identifier should have an appropriate form" id="MISRACPP2023-5_10_1-f" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_10_1" desc="Do not declare identifiers with names reserved in the standard library" id="MISRACPP2023-5_10_1-g" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="MISRACPP2023-5_13_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_13_2" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRACPP2023-5_13_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_13_3" desc="Octal constants (other than zero) shall not be used" id="MISRACPP2023-5_13_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_13_4" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRACPP2023-5_13_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_13_5" desc="The lowercase form of 'L' shall not be used as the first character in a literal suffix" id="MISRACPP2023-5_13_5-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_13_6" desc="An integer-literal of type long long shall not use a single 'L' or 'l' in any suffix" id="MISRACPP2023-5_13_6-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_13_7" desc="String literals with different encoding prefixes shall not be concatenated" id="MISRACPP2023-5_13_7-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_13_7" desc="String literals with and without encoding prefixes should not be concatenated" id="MISRACPP2023-5_13_7-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRACPP2023-5_7_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="MISRACPP2023-5_7_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-5_7_3" desc="Line-splicing shall not be used in // comments" id="MISRACPP2023-5_7_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_0_1" desc="Always declare functions at file scope" id="MISRACPP2023-6_0_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_0_1" desc="Parameter names in function declarations should not be enclosed in parentheses" id="MISRACPP2023-6_0_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_0_1" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="MISRACPP2023-6_0_1-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_0_2" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRACPP2023-6_0_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_0_3" desc="The global namespace shall only contain main() and namespace declarations" id="MISRACPP2023-6_0_3-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_0_4" desc="The identifier main shall not be used for a function other than the global function main" id="MISRACPP2023-6_0_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_2_1" desc="The One Definition Rule shall not be violated" id="MISRACPP2023-6_2_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_2_2" desc="All declarations of an object or function shall have compatible types" id="MISRACPP2023-6_2_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_2_2" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRACPP2023-6_2_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_2_3" desc="An identifier with external linkage shall have no more then one external definition" id="MISRACPP2023-6_2_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_2_3" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="MISRACPP2023-6_2_3-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_2_3" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="MISRACPP2023-6_2_3-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_2_3" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="MISRACPP2023-6_2_3-d" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_2_4" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="MISRACPP2023-6_2_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_4_1" desc="Member variable names in derived classes should not be the same as member variable names in base classes" id="MISRACPP2023-6_4_1-f" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_4_1" desc="A variable declared in an inner scope shall not hide a variable declared in an outer scope" id="MISRACPP2023-6_4_1-g" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_4_2" desc="Member functions declared in derived classes should not hide equivalent functions declared in base classes" id="MISRACPP2023-6_4_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_4_2" desc="Member functions declared in derived classes should not hide non-equivalent functions declared in base classes" id="MISRACPP2023-6_4_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_4_3" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;" id="MISRACPP2023-6_4_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_5_1" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRACPP2023-6_5_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_5_2" desc="Do not use static keyword except inside functions and classes" id="MISRACPP2023-6_5_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_5_2" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRACPP2023-6_5_2-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_7_1" desc="Local variables shall not have static storage duration" id="MISRACPP2023-6_7_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_7_2" desc="Global variables and static data members should not be used" id="MISRACPP2023-6_7_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_8_1" desc="Do not point to a wrapped object that has been freed" id="MISRACPP2023-6_8_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_8_1" desc="Do not read the value of a non-active union field" id="MISRACPP2023-6_8_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_8_1" desc="Do not use an object after its lifetime has ended" id="MISRACPP2023-6_8_1-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_8_2" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRACPP2023-6_8_2-a" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_8_2" desc="Never return lambdas that capture local objects by reference" id="MISRACPP2023-6_8_2-b" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_8_3" desc="The address of an object with automatic storage duration shall not be assigned to an object with a greater lifetime" id="MISRACPP2023-6_8_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_8_4" desc="Member functions returning references to their object should be ref-qualified appropriately" id="MISRACPP2023-6_8_4-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_9_1" desc="The same type aliases shall be used in all declarations of the same entity" id="MISRACPP2023-6_9_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-6_9_2" desc="The names of the standard signed integer types and standard unsigned integer types should not be used" id="MISRACPP2023-6_9_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_0_1" desc="There shall be no conversion from type bool" id="MISRACPP2023-7_0_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_0_2" desc="There shall be no conversion to type bool" id="MISRACPP2023-7_0_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_0_3" desc="The numerical value of a character shall not be used" id="MISRACPP2023-7_0_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_0_4" desc="Operands of bitwise and complement operators shall have an unsigned type" id="MISRACPP2023-7_0_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_0_4" desc="Operands of shift operators shall have an unsigned type" id="MISRACPP2023-7_0_4-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_0_5" desc="Integral promotion and the usual arithmetic conversions shall not change the signedness or the type category of an operand" id="MISRACPP2023-7_0_5-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_0_6" desc="Assignment between numeric types shall be appropriate" id="MISRACPP2023-7_0_6-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_11_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="MISRACPP2023-7_11_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_11_1" desc="The 'NULL' identifier should not be used" id="MISRACPP2023-7_11_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_11_2" desc="An object of array type should not decay to a pointer when it is passed as a function argument" id="MISRACPP2023-7_11_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_11_2" desc="An object of array type should not be passed as a variadic argument to a function" id="MISRACPP2023-7_11_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-7_11_3" desc="A conversion from function type to pointer-to-function type shall only occur in appropriate contexts" id="MISRACPP2023-7_11_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_0_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRACPP2023-8_0_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_0_1" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRACPP2023-8_0_1-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRACPP2023-8_14_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRACPP2023-8_18_1-a" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned to an overlapping object" id="MISRACPP2023-8_18_1-b" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_18_1" desc="An object shall not be assigned to an overlapping object" id="MISRACPP2023-8_18_1-c" sev="1">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_18_2" desc="The result of an assignment operator should not be used" id="MISRACPP2023-8_18_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_19_1" desc="The comma operator shall not be used" id="MISRACPP2023-8_19_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_1_1" desc="A non-transient lambda shall not implicitly capture this" id="MISRACPP2023-8_1_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_1_2" desc="Variables should be captured explicitly in a non-transient lambda" id="MISRACPP2023-8_1_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_20_1" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRACPP2023-8_20_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_20_1" desc="Evaluation of constant unsigned integer expressions in preprocessor directives should not lead to wraparound" id="MISRACPP2023-8_20_1-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_1" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRACPP2023-8_2_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_10" desc="Do not use recursion" id="MISRACPP2023-8_2_10-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_11" desc="An argument passed via ellipsis shall have an appropriate type" id="MISRACPP2023-8_2_11-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_2" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRACPP2023-8_2_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_3" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRACPP2023-8_2_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_4" desc="Casts shall not be performed between a pointer to a function and any other type" id="MISRACPP2023-8_2_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_5" desc="Avoid using reinterpret_cast" id="MISRACPP2023-8_2_5-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_6" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRACPP2023-8_2_6-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_6" desc="An object with enumeration type shall not be converted to an object with pointer type" id="MISRACPP2023-8_2_6-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_7" desc="A cast should not convert a pointer type to an integral type" id="MISRACPP2023-8_2_7-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_7" desc="A cast should not convert a pointer type to 'intptr_t' and 'uintptr_t' types" id="MISRACPP2023-8_2_7-b" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_8" desc="A cast should not convert a pointer type to an integral type" id="MISRACPP2023-8_2_8-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_2_9" desc="The operand to typeid shall not be an expression of polymorphic class type" id="MISRACPP2023-8_2_9-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRACPP2023-8_3_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_3_2" desc="The built-in unary + operator should not be used" id="MISRACPP2023-8_3_2-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_7_1" desc="Avoid accessing arrays out of bounds" id="MISRACPP2023-8_7_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_7_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRACPP2023-8_7_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_7_1" desc="Avoid overflow when reading from a buffer" id="MISRACPP2023-8_7_1-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_7_1" desc="Avoid overflow when writing to a buffer" id="MISRACPP2023-8_7_1-d" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_7_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRACPP2023-8_7_1-e" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_7_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRACPP2023-8_7_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-8_9_1" desc="Do not compare two unrelated pointers" id="MISRACPP2023-8_9_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_2_1" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="MISRACPP2023-9_2_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRACPP2023-9_3_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_3_1" desc="'if' and 'else' should be followed by a compound statement" id="MISRACPP2023-9_3_1-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_4_1" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRACPP2023-9_4_1-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_4_2" desc="The first or the last label of a switch statement should be the 'default' label unless all enumeration values are tested" id="MISRACPP2023-9_4_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_4_2" desc="Every switch branch should be unconditionally terminated" id="MISRACPP2023-9_4_2-b" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_4_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRACPP2023-9_4_2-c" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_4_2" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRACPP2023-9_4_2-d" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_4_2" desc="Every switch statement shall have at least two switch-clauses" id="MISRACPP2023-9_4_2-e" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_4_2" desc="The 'switch' statement should not contain labels other than 'case' and 'default'" id="MISRACPP2023-9_4_2-f" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_4_2" desc="The condition of a 'switch' statement should only be preceded by an optional simple-declaration" id="MISRACPP2023-9_4_2-g" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_5_1" desc="Legacy 'for' statements should be simple" id="MISRACPP2023-9_5_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_5_2" desc="A for-range-initializer shall contain at most one function call" id="MISRACPP2023-9_5_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_6_1" desc="The goto statement shall not be used" id="MISRACPP2023-9_6_1-a" sev="4">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_6_2" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRACPP2023-9_6_2-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_6_3" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRACPP2023-9_6_3-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_6_4" desc="Never return from functions that should not return" id="MISRACPP2023-9_6_4-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
            <Rule cat="MISRACPP2023-9_6_5" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRACPP2023-9_6_5-a" sev="2">
               <Stats authTot="" total="0"/>
            </Rule>
         </RulesList>
         <CategoriesList>
            <Category desc="MISRA C++ 2023" name="MISRACPP2023" total="273">
               <Category desc="Rule 4.1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRACPP2023-4_1_3" total="4">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 4.1.2 (Advisory) Deprecated features should not be used" name="MISRACPP2023-4_1_2" total="4">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.6.1 (Advisory) The goto statement should not be used" name="MISRACPP2023-9_6_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.6.3 (Required) The goto statement shall jump to a label declared later in the function body" name="MISRACPP2023-9_6_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 28.3.1 (Required) Predicates shall not have persistent side effects" name="MISRACPP2023-28_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.6.2 (Required) A goto statement shall reference a label in a surrounding block" name="MISRACPP2023-9_6_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.6.5 (Required) A function with non-void return type shall return a value on all paths" name="MISRACPP2023-9_6_5" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.10.1 (Required) User-defined identifiers shall have an appropriate form" name="MISRACPP2023-5_10_1" total="7">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.6.4 (Required) A function declared with the [[noreturn]] attribute shall not return" name="MISRACPP2023-9_6_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 0.2.3 (Advisory) Types with limited visibility should be used at least once" name="MISRACPP2023-0_2_3" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 0.2.4 (Advisory) Functions with limited visibility should be used at least once" name="MISRACPP2023-0_2_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 22.4.1 (Required) The literal value zero shall be the only value assigned to errno" name="MISRACPP2023-22_4_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.2.1 (Required) An explicit type conversion shall not be an expression statement" name="MISRACPP2023-9_2_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 11.3.2 (Advisory) The declaration of an object should contain no more than two levels of pointer indirection" name="MISRACPP2023-11_3_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 11.3.1 (Advisory) Variables of array type should not be declared" name="MISRACPP2023-11_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 0.2.1 (Advisory) Variables with limited visibility should be used at least once" name="MISRACPP2023-0_2_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 18.3.2 (Required) An exception of class type shall be caught by const reference or reference" name="MISRACPP2023-18_3_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 0.2.2 (Required) A named function parameter shall be used at least once" name="MISRACPP2023-0_2_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 18.3.1 (Advisory) There should be at least one exception handler to catch all otherwise unhandled exceptions" name="MISRACPP2023-18_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 18.3.3 (Required) Handlers for a function-try-block of a constructor or destructor shall not refer to non-static members from their class or its bases" name="MISRACPP2023-18_3_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 10.1.2 (Required) The volatile qualifier shall be used appropriately" name="MISRACPP2023-10_1_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.1.3 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be defined prior to evaluation" name="MISRACPP2023-19_1_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.20.1 (Advisory) An unsigned arithmetic operation with constant operands should not wrap" name="MISRACPP2023-8_20_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 10.1.1 (Advisory) The target type of a pointer or lvalue reference parameter should be const-qualified appropriately" name="MISRACPP2023-10_1_1" total="3">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.1.2 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRACPP2023-19_1_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.1.1 (Required) The defined preprocessor operator shall be used appropriately" name="MISRACPP2023-19_1_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.0.1 (Advisory) Parentheses should be used to make the meaning of an expression appropriately explicit" name="MISRACPP2023-8_0_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 30.0.2 (Required) Reads and writes on the same file stream shall be separated by a positioning operation" name="MISRACPP2023-30_0_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.9.2 (Advisory) The names of the standard signed integer types and standard unsigned integer types should not be used" name="MISRACPP2023-6_9_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.9.1 (Required) The same type aliases shall be used in all declarations of the same entity" name="MISRACPP2023-6_9_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.5.2 (Advisory) Internal linkage should be specified appropriately" name="MISRACPP2023-6_5_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Dir 5.7.2 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRACPP2023-5_7_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.5.1 (Advisory) A function or object with external linkage should be introduced in a header file" name="MISRACPP2023-6_5_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.7.1 (Required) The character sequence /* shall not be used within a C-style comment" name="MISRACPP2023-5_7_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.7.3 (Required) Line-splicing shall not be used in // comments" name="MISRACPP2023-5_7_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 30.0.1 (Required) The C Library input/output functions shall not be used" name="MISRACPP2023-30_0_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.11 (Required) An argument passed via ellipsis shall have an appropriate type" name="MISRACPP2023-8_2_11" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.10 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRACPP2023-8_2_10" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.10.1 (Required) The features of &lt;cstdarg&gt; shall not be used" name="MISRACPP2023-21_10_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 28.6.1 (Required) The argument to std::move shall be a non-const lvalue" name="MISRACPP2023-28_6_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.10.2 (Required) The standard header file &lt;csetjmp&gt; shall not be used" name="MISRACPP2023-21_10_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 28.6.2 (Required) Forwarding references and std::forward shall be used together" name="MISRACPP2023-28_6_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.5.2 (Required) A for-range-initializer shall contain at most one function call" name="MISRACPP2023-9_5_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.18.1 (Mandatory) An object or subobject must not be copied to an overlapping object" name="MISRACPP2023-8_18_1" total="3">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.5.1 (Advisory) Legacy for statements should be simple" name="MISRACPP2023-9_5_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 15.1.5 (Required) A class shall only define an initializer-list constructor when it is the only constructor" name="MISRACPP2023-15_1_5" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 15.1.4 (Advisory) All direct, non-static data members of a class should be initialized before the class object is accessible" name="MISRACPP2023-15_1_4" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 4.6.1 (Required) Operations on a memory location shall be sequenced appropriately" name="MISRACPP2023-4_6_1" total="7">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 15.1.3 (Required) Conversion operators and constructors that are callable with a single argument shall be explicit" name="MISRACPP2023-15_1_3" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.10.3 (Required) The facilities provided by the standard header file &lt;csignal&gt; shall not be used" name="MISRACPP2023-21_10_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 15.1.2 (Advisory) All constructors of a class should explicitly initialize all of its virtual base classes and immediate base classes" name="MISRACPP2023-15_1_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.14.1 (Advisory) The right-hand operand of a logical &amp;&amp; or || operator should not contain persistent side effects" name="MISRACPP2023-8_14_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 24.5.2 (Required) The C++ Standard Library functions memcpy, memmove and memcmp from &lt;cstring&gt; shall not be used" name="MISRACPP2023-24_5_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.18.2 (Advisory) The result of an assignment operator should not be used" name="MISRACPP2023-8_18_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 28.6.3 (Required) An object shall not be used while in a potentially moved-from state" name="MISRACPP2023-28_6_3" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 24.5.1 (Required) The character handling functions from &lt;cctype&gt; and &lt;cwctype&gt; shall not be used" name="MISRACPP2023-24_5_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 28.6.4 (Required) The result of std::remove, std::remove_if, std::unique and empty shall be used" name="MISRACPP2023-28_6_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.7.1 (Required) Pointer arithmetic shall not form an invalid pointer" name="MISRACPP2023-8_7_1" total="5">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.3.2 (Advisory) The built-in unary + operator should not be used" name="MISRACPP2023-8_3_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 0.1.2 (Required) The value returned by a function shall be used" name="MISRACPP2023-0_1_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 18.4.1 (Required) Exception-unfriendly functions shall be noexcept" name="MISRACPP2023-18_4_1" total="3">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 0.1.1 (Advisory) A value should not be unnecessarily written to a local object" name="MISRACPP2023-0_1_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.6.1 (Advisory) The #pragma directive and the _Pragma operator should not be used" name="MISRACPP2023-19_6_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.7.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRACPP2023-8_7_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 15.1.1 (Required) An object's dynamic type shall not be used from within its constructor or destructor" name="MISRACPP2023-15_1_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.2.3 (Required) The ' or &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRACPP2023-19_2_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 10.2.1 (Required) An enumeration shall be defined with an explicit underlying type" name="MISRACPP2023-10_2_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.2.2 (Required) The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence" name="MISRACPP2023-19_2_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.2.1 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRACPP2023-19_2_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 10.2.3 (Required) The numeric value of an unscoped enumeration with no fixed underlying type shall not be used" name="MISRACPP2023-10_2_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.3.1 (Advisory) The built-in unary - operator should not be applied to an expression of unsigned type" name="MISRACPP2023-8_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 10.2.2 (Advisory) Unscoped enumerations should not be declared" name="MISRACPP2023-10_2_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 12.3.1 (Required) The union keyword shall not be used" name="MISRACPP2023-12_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.6.2 (Required) Dynamic memory shall be managed automatically" name="MISRACPP2023-21_6_2" total="3">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.6.3 (Required) Advanced memory management shall not be used" name="MISRACPP2023-21_6_3" total="4">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.0.6 (Required) Assignment between numeric types shall be appropriate" name="MISRACPP2023-7_0_6" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.6.4 (Required) If a project defines either a sized or unsized version of a global operator delete, then both shall be defined" name="MISRACPP2023-21_6_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.6.5 (Required) A pointer to an incomplete class type shall not be deleted" name="MISRACPP2023-21_6_5" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.0.3 (Required) The numerical value of a character shall not be used" name="MISRACPP2023-7_0_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.0.2 (Required) There shall be no conversion to type bool" name="MISRACPP2023-7_0_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.0.5 (Required) Integral promotion and the usual arithmetic conversions shall not change the signedness or the type category of an operand" name="MISRACPP2023-7_0_5" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.0.4 (Required) The operands of bitwise operators and shift operators shall be appropriate" name="MISRACPP2023-7_0_4" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.0.1 (Required) There shall be no conversion from type bool" name="MISRACPP2023-7_0_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.0.1 (Advisory) Trigraph-like sequences should not be used" name="MISRACPP2023-5_0_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 13.1.2 (Required) An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="MISRACPP2023-13_1_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 13.1.1 (Advisory) Classes should not be inherited virtually" name="MISRACPP2023-13_1_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.2.1 (Required) The library functions atof, atoi, atol and atoll from &lt;cstdlib&gt; shall not be used" name="MISRACPP2023-21_2_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.2.4 (Required) A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" name="MISRACPP2023-6_2_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.2.3 (Required) The source code used to implement an entity shall appear only once" name="MISRACPP2023-6_2_3" total="4">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.2.2 (Required) All declarations of a variable or function shall have the same type" name="MISRACPP2023-6_2_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.6.1 (Advisory) Dynamic memory should not be used" name="MISRACPP2023-21_6_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.2.1 (Required) The one-definition rule shall not be violated" name="MISRACPP2023-6_2_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.2.4 (Required) The macro offsetof shall not be used" name="MISRACPP2023-21_2_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.2.3 (Required) The library function system from &lt;cstdlib&gt; shall not be used" name="MISRACPP2023-21_2_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 21.2.2 (Required) The string handling functions from &lt;cstring&gt;, &lt;cstdlib&gt;, &lt;cwchar&gt; and &lt;cinttypes&gt; shall not be used" name="MISRACPP2023-21_2_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.4.1 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRACPP2023-9_4_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Dir 15.8.1 (Required) User-provided copy assignment operators and move assignment operators shall handle self-assignment" name="MISRACPP2023-15_8_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.4.2 (Required) The structure of a switch statement shall be appropriate" name="MISRACPP2023-9_4_2" total="7">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.19.1 (Advisory) The comma operator should not be used" name="MISRACPP2023-8_19_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.6 (Required) An object with integral, enumerated, or pointer to void type shall not be cast to a pointer type" name="MISRACPP2023-8_2_6" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.5 (Required) reinterpret_cast shall not be used" name="MISRACPP2023-8_2_5" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 18.1.2 (Required) An empty throw shall only occur within the compound-statement of a catch handler" name="MISRACPP2023-18_1_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.4 (Required) Casts shall not be performed between a pointer to function and any other type" name="MISRACPP2023-8_2_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 18.1.1 (Required) An exception object shall not have pointer type" name="MISRACPP2023-18_1_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.3 (Required) A cast shall not remove any const or volatile qualification from the type accessed via a pointer or by reference" name="MISRACPP2023-8_2_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.9 (Required) The operand to typeid shall not be an expression of polymorphic class type" name="MISRACPP2023-8_2_9" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 0.0.1 (Required) A function shall not contain unreachable statements" name="MISRACPP2023-0_0_1" total="10">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 18.5.2 (Advisory) Program-terminating functions should not be used" name="MISRACPP2023-18_5_2" total="4">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.3.5 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRACPP2023-19_3_5" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.8 (Required) An object pointer type shall not be cast to an integral type other than std::uintptr_t or std::intptr_t" name="MISRACPP2023-8_2_8" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 0.0.2 (Advisory) Controlling expressions should not be invariant" name="MISRACPP2023-0_0_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 18.5.1 (Advisory) A noexcept function should not attempt to propagate an exception to the calling function" name="MISRACPP2023-18_5_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.3.4 (Required) Parentheses shall be used to ensure macro arguments are expanded appropriately" name="MISRACPP2023-19_3_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.7 (Advisory) A cast should not convert a pointer type to an integral type" name="MISRACPP2023-8_2_7" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 15.0.2 (Advisory) User-provided copy and move member functions of a class should have appropriate signatures" name="MISRACPP2023-15_0_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.3.3 (Required) The argument to a mixed-use macro parameter shall not be subject to further expansion" name="MISRACPP2023-19_3_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 15.0.1 (Required) Special member functions shall be provided appropriately" name="MISRACPP2023-15_0_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.3.2 (Required) A macro parameter immediately following a # operator shall not be immediately followed by a ## operator" name="MISRACPP2023-19_3_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.3.1 (Advisory) The # and ## preprocessor operators should not be used" name="MISRACPP2023-19_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.2 (Required) C-style casts and functional notation casts shall not be used" name="MISRACPP2023-8_2_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 10.3.1 (Advisory) There should be no unnamed namespaces in header files" name="MISRACPP2023-10_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.2.1 (Required) A virtual base class shall only be cast to a derived class by means of dynamic_cast" name="MISRACPP2023-8_2_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 12.2.1 (Advisory) Bit-fields should not be declared" name="MISRACPP2023-12_2_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 12.2.3 (Required) A named bit-field with signed integer type shall not have a length of one bit" name="MISRACPP2023-12_2_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 12.2.2 (Required) A bit-field shall have an appropriate type" name="MISRACPP2023-12_2_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 16.5.2 (Required) The address-of operator shall not be overloaded" name="MISRACPP2023-16_5_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 16.5.1 (Required) The logical AND and logical OR operators shall not be overloaded" name="MISRACPP2023-16_5_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.7.2 (Required) Global variables shall not be used" name="MISRACPP2023-6_7_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.7.1 (Required) Local variables shall not have static storage duration" name="MISRACPP2023-6_7_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 23.11.1 (Advisory) The raw pointer constructors of std::shared_ptr and std::unique_ptr should not be used" name="MISRACPP2023-23_11_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.13.1 (Required) Within character literals and non raw-string literals, \ shall only be used to form a defined escape sequence or universal character name" name="MISRACPP2023-5_13_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 9.3.1 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRACPP2023-9_3_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.13.3 (Required) Octal constants shall not be used" name="MISRACPP2023-5_13_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.13.2 (Required) Octal escape sequences, hexadecimal escape sequences and universal character names shall be terminated" name="MISRACPP2023-5_13_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 14.1.1 (Advisory) Non-static data members should be either all private or all public" name="MISRACPP2023-14_1_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Dir 0.3.2 (Required) A function call shall not violate the function's preconditions" name="MISRACPP2023-0_3_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.13.5 (Required) The lowercase form of &quot;L&quot; shall not be used as the first character in a literal suffix" name="MISRACPP2023-5_13_5" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 11.6.3 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRACPP2023-11_6_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.13.4 (Required) Unsigned integer literals shall be appropriately suffixed" name="MISRACPP2023-5_13_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 11.6.2 (Mandatory) The value of an object must not be read before it has been set" name="MISRACPP2023-11_6_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.13.7 (Required) String literals with different encoding prefixes shall not be concatenated" name="MISRACPP2023-5_13_7" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 11.6.1 (Advisory) All variables should be initialized" name="MISRACPP2023-11_6_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 22.3.1 (Required) The assert macro shall not be used with a constant-expression" name="MISRACPP2023-22_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 5.13.6 (Required) An integer-literal of type long long shall not use a single L or l in any suffix" name="MISRACPP2023-5_13_6" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Dir 0.3.1 (Advisory) Floating-point arithmetic should be used appropriately" name="MISRACPP2023-0_3_1" total="4">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.9.1 (Required) The built-in relational operators &gt;, &gt;=, &lt; and &lt;= shall not be applied to objects of pointer type, except where they point to elements of the same array" name="MISRACPP2023-8_9_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 10.0.1 (Advisory) A declaration should not declare more than one variable or member variable" name="MISRACPP2023-10_0_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.0.4 (Advisory) #undef should only be used for macros defined previously in the same file" name="MISRACPP2023-19_0_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.0.3 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRACPP2023-19_0_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 10.4.1 (Required) The asm declaration shall not be used" name="MISRACPP2023-10_4_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.0.2 (Required) Function-like macros shall not be defined" name="MISRACPP2023-19_0_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 19.0.1 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRACPP2023-19_0_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.1.2 (Advisory) Variables should be captured explicitly in a non-transient lambda" name="MISRACPP2023-8_1_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 8.1.1 (Required) A non-transient lambda shall not implicitly capture this" name="MISRACPP2023-8_1_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 13.3.4 (Required) A comparison of a potentially virtual pointer to member function shall only be with nullptr" name="MISRACPP2023-13_3_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 13.3.3 (Required) The parameters in all declarations or overrides of a function shall either be unnamed or have identical names" name="MISRACPP2023-13_3_3" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 13.3.2 (Required) Parameters in an overriding virtual function shall not specify different default arguments" name="MISRACPP2023-13_3_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 17.8.1 (Required) Function templates shall not be explicitly specialized" name="MISRACPP2023-17_8_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 26.3.1 (Advisory) std::vector should not be specialized with bool" name="MISRACPP2023-26_3_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.11.3 (Required) A conversion from function type to pointer-to-function type shall only occur in appropriate contexts" name="MISRACPP2023-7_11_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.11.2 (Required) An array passed as a function argument shall not decay to a pointer" name="MISRACPP2023-7_11_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 7.11.1 (Required) nullptr shall be the only form of the null-pointer-constant" name="MISRACPP2023-7_11_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 16.6.1 (Advisory) Symmetrical operators should only be implemented as non-member functions" name="MISRACPP2023-16_6_1" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.8.4 (Advisory) Member functions returning references to their object should be ref-qualified appropriately" name="MISRACPP2023-6_8_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.8.3 (Required) An assignment operator shall not assign the address of an object with automatic storage duration to an object with a greater lifetime" name="MISRACPP2023-6_8_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 13.3.1 (Required) User-declared member functions shall use the virtual, override and final specifiers appropriately" name="MISRACPP2023-13_3_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.8.2 (Mandatory) A function must not return a reference or a pointer to a local variable with automatic storage duration" name="MISRACPP2023-6_8_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.8.1 (Required) An object shall not be accessed outside of its lifetime" name="MISRACPP2023-6_8_1" total="3">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.4.3 (Required) A name that is present in a dependent base shall not be resolved by unqualified lookup" name="MISRACPP2023-6_4_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 25.5.3 (Mandatory) The pointer returned by the C++ Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror must not be used following a subsequent call to the same function" name="MISRACPP2023-25_5_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.4.2 (Required) Derived classes shall not conceal functions that are inherited from their bases" name="MISRACPP2023-6_4_2" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.4.1 (Required) A variable declared in an inner scope shall not hide a variable declared in an outer scope" name="MISRACPP2023-6_4_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.0.4 (Required) The identifier main shall not be used for a function other than the global function main" name="MISRACPP2023-6_0_4" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.0.3 (Advisory) The only declarations in the global namespace should be main, namespace declarations and extern &quot;C&quot; declarations" name="MISRACPP2023-6_0_3" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.0.2 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRACPP2023-6_0_2" total="1">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 6.0.1 (Required) Block scope declarations shall not be visually ambiguous" name="MISRACPP2023-6_0_1" total="3">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 25.5.1 (Required) The setlocale and std::locale::global functions shall not be called" name="MISRACPP2023-25_5_1" total="2">
                  <Stats authTot="" total="0"/>
               </Category>
               <Category desc="Rule 25.5.2 (Mandatory) The pointers returned by the C++ Standard Library functions localeconv, getenv, setlocale or strerror must only be used as if they have pointer to const-qualified type" name="MISRACPP2023-25_5_2" total="3">
                  <Stats authTot="" total="0"/>
               </Category>
               <Stats authTot="" total="0"/>
            </Category>
         </CategoriesList>
         <SeverityList/>
      </Rules>
      <mergePnt id="testedFilesDetails"/>
   </CodingStandards>
   <AssocUrls/>
</ResultsSession>
